/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { rest } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "https://api.twitter.com";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  rest.get(`${baseURL}/2/compliance/jobs`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListBatchComplianceJobs200Response())],
      [ctx.status(NaN), ctx.json(getListBatchComplianceJobsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/compliance/jobs`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getCreateBatchComplianceJob200Response())],
      [ctx.status(NaN), ctx.json(getCreateBatchComplianceJobdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/compliance/jobs/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetBatchComplianceJob200Response())],
      [ctx.status(NaN), ctx.json(getGetBatchComplianceJobdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/dm_conversations`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getDmConversationIdCreate201Response())],
      [ctx.status(NaN), ctx.json(getDmConversationIdCreatedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(
    `${baseURL}/2/dm_conversations/with/:participantId/dm_events`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json(getGetDmConversationsWithParticipantIdDmEvents200Response()),
        ],
        [
          ctx.status(NaN),
          ctx.json(
            getGetDmConversationsWithParticipantIdDmEventsdefaultResponse()
          ),
        ],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.post(
    `${baseURL}/2/dm_conversations/with/:participantId/messages`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json(getDmConversationWithUserEventIdCreate201Response()),
        ],
        [
          ctx.status(NaN),
          ctx.json(getDmConversationWithUserEventIdCreatedefaultResponse()),
        ],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.post(
    `${baseURL}/2/dm_conversations/:dmConversationId/messages`,
    (_, res, ctx) => {
      const resultArray = [
        [
          ctx.status(201),
          ctx.json(getDmConversationByIdEventIdCreate201Response()),
        ],
        [
          ctx.status(NaN),
          ctx.json(getDmConversationByIdEventIdCreatedefaultResponse()),
        ],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.get(`${baseURL}/2/dm_conversations/:id/dm_events`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetDmConversationsIdDmEvents200Response())],
      [
        ctx.status(NaN),
        ctx.json(getGetDmConversationsIdDmEventsdefaultResponse()),
      ],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/dm_events`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetDmEvents200Response())],
      [ctx.status(NaN), ctx.json(getGetDmEventsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListIdCreate200Response())],
      [ctx.status(NaN), ctx.json(getListIdCreatedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/lists/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListIdDelete200Response())],
      [ctx.status(NaN), ctx.json(getListIdDeletedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/lists/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListIdGet200Response())],
      [ctx.status(NaN), ctx.json(getListIdGetdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.put(`${baseURL}/2/lists/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListIdUpdate200Response())],
      [ctx.status(NaN), ctx.json(getListIdUpdatedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/lists/:id/followers`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListGetFollowers200Response())],
      [ctx.status(NaN), ctx.json(getListGetFollowersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/lists/:id/members`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListGetMembers200Response())],
      [ctx.status(NaN), ctx.json(getListGetMembersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/lists/:id/members`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListAddMember200Response())],
      [ctx.status(NaN), ctx.json(getListAddMemberdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/lists/:id/members/:userId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListRemoveMember200Response())],
      [ctx.status(NaN), ctx.json(getListRemoveMemberdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/lists/:id/tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListsIdTweets200Response())],
      [ctx.status(NaN), ctx.json(getListsIdTweetsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/openapi.json`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetOpenApiSpec200Response())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindSpacesByIds200Response())],
      [ctx.status(NaN), ctx.json(getFindSpacesByIdsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces/by/creator_ids`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindSpacesByCreatorIds200Response())],
      [ctx.status(NaN), ctx.json(getFindSpacesByCreatorIdsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces/search`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getSearchSpaces200Response())],
      [ctx.status(NaN), ctx.json(getSearchSpacesdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindSpaceById200Response())],
      [ctx.status(NaN), ctx.json(getFindSpaceByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces/:id/buyers`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getSpaceBuyers200Response())],
      [ctx.status(NaN), ctx.json(getSpaceBuyersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/spaces/:id/tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getSpaceTweets200Response())],
      [ctx.status(NaN), ctx.json(getSpaceTweetsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets`, (req, res, ctx) => {
    const ids = req.url.search.split('=')[1].split(',')
    const resultArray = [
      [ctx.status(200), ctx.json(getFindTweetsById200Response(ids.length))],
      [ctx.status(NaN), ctx.json(getFindTweetsByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(201), ctx.json(getCreateTweet201Response())],
      [ctx.status(NaN), ctx.json(getCreateTweetdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/compliance/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetTweetsComplianceStream200Response())],
      [
        ctx.status(NaN),
        ctx.json(getGetTweetsComplianceStreamdefaultResponse()),
      ],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/counts/all`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetCountsFullArchiveSearch200Response())],
      [
        ctx.status(NaN),
        ctx.json(getTweetCountsFullArchiveSearchdefaultResponse()),
      ],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/counts/recent`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetCountsRecentSearch200Response())],
      [ctx.status(NaN), ctx.json(getTweetCountsRecentSearchdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/firehose/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetTweetsFirehoseStream200Response())],
      [ctx.status(NaN), ctx.json(getGetTweetsFirehoseStreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/label/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetTweetsLabelStream200Response())],
      [ctx.status(NaN), ctx.json(getGetTweetsLabelStreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/sample/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getSampleStream200Response())],
      [ctx.status(NaN), ctx.json(getSampleStreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/sample10/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetTweetsSample10Stream200Response())],
      [ctx.status(NaN), ctx.json(getGetTweetsSample10StreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/search/all`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetsFullarchiveSearch200Response())],
      [ctx.status(NaN), ctx.json(getTweetsFullarchiveSearchdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/search/recent`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetsRecentSearch200Response())],
      [ctx.status(NaN), ctx.json(getTweetsRecentSearchdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/search/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getSearchStream200Response())],
      [ctx.status(NaN), ctx.json(getSearchStreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/search/stream/rules`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetRules200Response())],
      [ctx.status(NaN), ctx.json(getGetRulesdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/tweets/search/stream/rules`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getAddOrDeleteRules200Response())],
      [ctx.status(NaN), ctx.json(getAddOrDeleteRulesdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/tweets/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getDeleteTweetById200Response())],
      [ctx.status(NaN), ctx.json(getDeleteTweetByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/:id`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindTweetById200Response())],
      [ctx.status(NaN), ctx.json(getFindTweetByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/:id/liking_users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetsIdLikingUsers200Response())],
      [ctx.status(NaN), ctx.json(getTweetsIdLikingUsersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/:id/quote_tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindTweetsThatQuoteATweet200Response())],
      [
        ctx.status(NaN),
        ctx.json(getFindTweetsThatQuoteATweetdefaultResponse()),
      ],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/tweets/:id/retweeted_by`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getTweetsIdRetweetingUsers200Response())],
      [ctx.status(NaN), ctx.json(getTweetsIdRetweetingUsersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.put(`${baseURL}/2/tweets/:tweetId/hidden`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getHideReplyById200Response())],
      [ctx.status(NaN), ctx.json(getHideReplyByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindUsersById200Response())],
      [ctx.status(NaN), ctx.json(getFindUsersByIddefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/by`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindUsersByUsername200Response())],
      [ctx.status(NaN), ctx.json(getFindUsersByUsernamedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/by/username/:username`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindUserByUsername200Response())],
      [ctx.status(NaN), ctx.json(getFindUserByUsernamedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/compliance/stream`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersComplianceStream200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersComplianceStreamdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/me`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getFindMyUser200Response())],
      [ctx.status(NaN), ctx.json(getFindMyUserdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id`, (req, res, ctx) => {

    const { id } = req.params

    return res(ctx.status(200), ctx.json(getFindUserById200Response(id)));
  }),
  rest.get(`${baseURL}/2/users/:id/blocking`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdBlocking200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdBlockingdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/blocking`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdBlock200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdBlockdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/bookmarks`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUsersIdBookmarks200Response())],
      [ctx.status(NaN), ctx.json(getGetUsersIdBookmarksdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/bookmarks`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getPostUsersIdBookmarks200Response())],
      [ctx.status(NaN), ctx.json(getPostUsersIdBookmarksdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/users/:id/bookmarks/:tweetId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdBookmarksDelete200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdBookmarksDeletedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/followed_lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUserFollowedLists200Response())],
      [ctx.status(NaN), ctx.json(getUserFollowedListsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/followed_lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListUserFollow200Response())],
      [ctx.status(NaN), ctx.json(getListUserFollowdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(
    `${baseURL}/2/users/:id/followed_lists/:listId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getListUserUnfollow200Response())],
        [ctx.status(NaN), ctx.json(getListUserUnfollowdefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.get(`${baseURL}/2/users/:id/followers`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdFollowers200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdFollowersdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/following`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdFollowing200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdFollowingdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/following`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdFollow200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdFollowdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/liked_tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdLikedTweets200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdLikedTweetsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/likes`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdLike200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdLikedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/users/:id/likes/:tweetId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdUnlike200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdUnlikedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/list_memberships`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getGetUserListMemberships200Response())],
      [ctx.status(NaN), ctx.json(getGetUserListMembershipsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/mentions`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdMentions200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdMentionsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/muting`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdMuting200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdMutingdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/muting`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdMute200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdMutedefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/owned_lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListUserOwnedLists200Response())],
      [ctx.status(NaN), ctx.json(getListUserOwnedListsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.get(`${baseURL}/2/users/:id/pinned_lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListUserPinnedLists200Response())],
      [ctx.status(NaN), ctx.json(getListUserPinnedListsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/pinned_lists`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListUserPin200Response())],
      [ctx.status(NaN), ctx.json(getListUserPindefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(`${baseURL}/2/users/:id/pinned_lists/:listId`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getListUserUnpin200Response())],
      [ctx.status(NaN), ctx.json(getListUserUnpindefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.post(`${baseURL}/2/users/:id/retweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdRetweets200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdRetweetsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(
    `${baseURL}/2/users/:id/retweets/:sourceTweetId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getUsersIdUnretweets200Response())],
        [ctx.status(NaN), ctx.json(getUsersIdUnretweetsdefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.get(
    `${baseURL}/2/users/:id/timelines/reverse_chronological`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getUsersIdTimeline200Response())],
        [ctx.status(NaN), ctx.json(getUsersIdTimelinedefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.get(`${baseURL}/2/users/:id/tweets`, (_, res, ctx) => {
    const resultArray = [
      [ctx.status(200), ctx.json(getUsersIdTweets200Response())],
      [ctx.status(NaN), ctx.json(getUsersIdTweetsdefaultResponse())],
    ];

    return res(...resultArray[0]);
  }),
  rest.delete(
    `${baseURL}/2/users/:sourceUserId/blocking/:targetUserId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getUsersIdUnblock200Response())],
        [ctx.status(NaN), ctx.json(getUsersIdUnblockdefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.delete(
    `${baseURL}/2/users/:sourceUserId/following/:targetUserId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getUsersIdUnfollow200Response())],
        [ctx.status(NaN), ctx.json(getUsersIdUnfollowdefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
  rest.delete(
    `${baseURL}/2/users/:sourceUserId/muting/:targetUserId`,
    (_, res, ctx) => {
      const resultArray = [
        [ctx.status(200), ctx.json(getUsersIdUnmute200Response())],
        [ctx.status(NaN), ctx.json(getUsersIdUnmutedefaultResponse())],
      ];

      return res(...resultArray[0]);
    }
  ),
];

export function getListBatchComplianceJobs200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2021-01-06T18:40:40.000Z",
      download_expires_at: "2021-01-06T18:40:40.000Z",
      download_url: faker.internet.url(),
      id: "1372966999991541762",
      name: "my-job",
      status: faker.helpers.arrayElement([
        "created",
        "in_progress",
        "failed",
        "complete",
        "expired",
      ]),
      type: faker.helpers.arrayElement(["tweets", "users"]),
      upload_expires_at: "2021-01-06T18:40:40.000Z",
      upload_url: faker.internet.url(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    meta: {
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListBatchComplianceJobsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getCreateBatchComplianceJob200Response() {
  return {
    data: {
      created_at: "2021-01-06T18:40:40.000Z",
      download_expires_at: "2021-01-06T18:40:40.000Z",
      download_url: faker.internet.url(),
      id: "1372966999991541762",
      name: "my-job",
      status: faker.helpers.arrayElement([
        "created",
        "in_progress",
        "failed",
        "complete",
        "expired",
      ]),
      type: faker.helpers.arrayElement(["tweets", "users"]),
      upload_expires_at: "2021-01-06T18:40:40.000Z",
      upload_url: faker.internet.url(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getCreateBatchComplianceJobdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetBatchComplianceJob200Response() {
  return {
    data: {
      created_at: "2021-01-06T18:40:40.000Z",
      download_expires_at: "2021-01-06T18:40:40.000Z",
      download_url: faker.internet.url(),
      id: "1372966999991541762",
      name: "my-job",
      status: faker.helpers.arrayElement([
        "created",
        "in_progress",
        "failed",
        "complete",
        "expired",
      ]),
      type: faker.helpers.arrayElement(["tweets", "users"]),
      upload_expires_at: "2021-01-06T18:40:40.000Z",
      upload_url: faker.internet.url(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getGetBatchComplianceJobdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getDmConversationIdCreate201Response() {
  return {
    data: {
      dm_conversation_id: "123123123-456456456",
      dm_event_id: "1146654567674912769",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getDmConversationIdCreatedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetDmConversationsWithParticipantIdDmEvents200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      attachments: {
        card_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
        media_keys: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
      },
      created_at: faker.date.past(),
      dm_conversation_id: "123123123-456456456",
      event_type: "MessageCreate",
      id: "1146654567674912769",
      participant_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      referenced_tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        id: "1346889436626259968",
      })),
      sender_id: "2244994945",
      text: faker.lorem.slug(1),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetDmConversationsWithParticipantIdDmEventsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getDmConversationWithUserEventIdCreate201Response() {
  return {
    data: {
      dm_conversation_id: "123123123-456456456",
      dm_event_id: "1146654567674912769",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getDmConversationWithUserEventIdCreatedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getDmConversationByIdEventIdCreate201Response() {
  return {
    data: {
      dm_conversation_id: "123123123-456456456",
      dm_event_id: "1146654567674912769",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getDmConversationByIdEventIdCreatedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetDmConversationsIdDmEvents200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      attachments: {
        card_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
        media_keys: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
      },
      created_at: faker.date.past(),
      dm_conversation_id: "123123123-456456456",
      event_type: "MessageCreate",
      id: "1146654567674912769",
      participant_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      referenced_tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        id: "1346889436626259968",
      })),
      sender_id: "2244994945",
      text: faker.lorem.slug(1),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetDmConversationsIdDmEventsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetDmEvents200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      attachments: {
        card_ids: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
        media_keys: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => faker.lorem.slug(1)),
      },
      created_at: faker.date.past(),
      dm_conversation_id: "123123123-456456456",
      event_type: "MessageCreate",
      id: "1146654567674912769",
      participant_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      referenced_tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        id: "1346889436626259968",
      })),
      sender_id: "2244994945",
      text: faker.lorem.slug(1),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetDmEventsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListIdCreate200Response() {
  return {
    data: {
      id: "1146654567674912769",
      name: faker.person.fullName(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListIdCreatedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListIdDelete200Response() {
  return {
    data: {
      deleted: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListIdDeletedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListIdGet200Response() {
  return {
    data: {
      created_at: faker.date.past(),
      description: faker.lorem.slug(1),
      follower_count: faker.number.int({ min: undefined, max: undefined }),
      id: "1146654567674912769",
      member_count: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      owner_id: "2244994945",
      private: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getListIdGetdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListIdUpdate200Response() {
  return {
    data: {
      updated: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListIdUpdatedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListGetFollowers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListGetFollowersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListGetMembers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListGetMembersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListAddMember200Response() {
  return {
    data: {
      is_member: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListAddMemberdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListRemoveMember200Response() {
  return {
    data: {
      is_member: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListRemoveMemberdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListsIdTweets200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: faker.string.numeric({ length: 10, allowLeadingZeros: true }),
      created_at: faker.date.past({ years: 2 }),
      id: faker.string.numeric({ length: 20, allowLeadingZeros: true }),
      text: faker.lorem.text(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListsIdTweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetOpenApiSpec200Response() {
  return {};
}

export function getFindSpacesByIds200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2021-07-06T18:40:40.000Z",
      creator_id: "2244994945",
      ended_at: "2021-07-06T18:40:40.000Z",
      host_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      id: "1SLjjRYNejbKM",
      invited_user_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      is_ticketed: "false",
      lang: "en",
      participant_count: 10,
      scheduled_start: "2021-07-06T18:40:40.000Z",
      speaker_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      started_at: "2021-7-14T04:35:55Z",
      state: "live",
      subscriber_count: 10,
      title: "Spaces are Awesome",
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: "848920371311001600",
        name: "Technology",
      })),
      updated_at: "2021-7-14T04:35:55Z",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindSpacesByIdsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindSpacesByCreatorIds200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2021-07-06T18:40:40.000Z",
      creator_id: "2244994945",
      ended_at: "2021-07-06T18:40:40.000Z",
      host_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      id: "1SLjjRYNejbKM",
      invited_user_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      is_ticketed: "false",
      lang: "en",
      participant_count: 10,
      scheduled_start: "2021-07-06T18:40:40.000Z",
      speaker_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      started_at: "2021-7-14T04:35:55Z",
      state: "live",
      subscriber_count: 10,
      title: "Spaces are Awesome",
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: "848920371311001600",
        name: "Technology",
      })),
      updated_at: "2021-7-14T04:35:55Z",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getFindSpacesByCreatorIdsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getSearchSpaces200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2021-07-06T18:40:40.000Z",
      creator_id: "2244994945",
      ended_at: "2021-07-06T18:40:40.000Z",
      host_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      id: "1SLjjRYNejbKM",
      invited_user_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      is_ticketed: "false",
      lang: "en",
      participant_count: 10,
      scheduled_start: "2021-07-06T18:40:40.000Z",
      speaker_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      started_at: "2021-7-14T04:35:55Z",
      state: "live",
      subscriber_count: 10,
      title: "Spaces are Awesome",
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: "848920371311001600",
        name: "Technology",
      })),
      updated_at: "2021-7-14T04:35:55Z",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getSearchSpacesdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindSpaceById200Response() {
  return {
    data: {
      created_at: "2021-07-06T18:40:40.000Z",
      creator_id: "2244994945",
      ended_at: "2021-07-06T18:40:40.000Z",
      host_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      id: "1SLjjRYNejbKM",
      invited_user_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      is_ticketed: "false",
      lang: "en",
      participant_count: 10,
      scheduled_start: "2021-07-06T18:40:40.000Z",
      speaker_ids: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => "2244994945"),
      started_at: "2021-7-14T04:35:55Z",
      state: "live",
      subscriber_count: 10,
      title: "Spaces are Awesome",
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: "848920371311001600",
        name: "Technology",
      })),
      updated_at: "2021-7-14T04:35:55Z",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindSpaceByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getSpaceBuyers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getSpaceBuyersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getSpaceTweets200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getSpaceTweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindTweetsById200Response(num) {
  return {
    data: [
      ...new Array(num).keys(),
    ].map((_) => ({
      author_id: faker.string.numeric({ length: 10, allowLeadingZeros: true }),
      created_at: faker.date.past({ years: 2 }),
      id: faker.string.numeric({ length: 20, allowLeadingZeros: true }),
      text: faker.lorem.text(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindTweetsByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getCreateTweet201Response() {
  return {
    data: {
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getCreateTweetdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetTweetsComplianceStream200Response() {
  return faker.helpers.arrayElement([
    {
      data: faker.helpers.arrayElement([
        {
          delete: {
            event_at: "2021-07-06T18:40:40.000Z",
            quote_tweet_id: "1346889436626259968",
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
          },
        },
        {
          withheld: {
            event_at: "2021-07-06T18:40:40.000Z",
            quote_tweet_id: "1346889436626259968",
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
            withheld_in_countries: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map((_) => "US"),
          },
        },
        {
          drop: {
            event_at: "2021-07-06T18:40:40.000Z",
            quote_tweet_id: "1346889436626259968",
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
          },
        },
        {
          undrop: {
            event_at: "2021-07-06T18:40:40.000Z",
            quote_tweet_id: "1346889436626259968",
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
          },
        },
        {
          tweet_edit: {
            edit_tweet_ids: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map((_) => "1346889436626259968"),
            event_at: "2021-07-06T18:40:40.000Z",
            initial_tweet_id: "1346889436626259968",
            tweet: {
              id: "1346889436626259968",
            },
          },
        },
      ]),
    },
    {
      errors: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        detail: faker.lorem.slug(1),
        status: faker.number.int({ min: undefined, max: undefined }),
        title: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      })),
    },
  ]);
}

export function getGetTweetsComplianceStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetCountsFullArchiveSearch200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      end: faker.date.past(),
      start: faker.date.past(),
      tweet_count: faker.number.int({ min: undefined, max: undefined }),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      total_tweet_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetCountsFullArchiveSearchdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetCountsRecentSearch200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      end: faker.date.past(),
      start: faker.date.past(),
      tweet_count: faker.number.int({ min: undefined, max: undefined }),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      total_tweet_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetCountsRecentSearchdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetTweetsFirehoseStream200Response() {
  return {
    data: {
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getGetTweetsFirehoseStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetTweetsLabelStream200Response() {
  return faker.helpers.arrayElement([
    {
      data: faker.helpers.arrayElement([
        {
          public_tweet_notice: {
            application: "apply",
            details: faker.lorem.slug(1),
            event_at: "2021-07-06T18:40:40.000Z",
            event_type: "misleading",
            extended_details_url: faker.internet.url(),
            label_title: faker.lorem.slug(1),
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
          },
        },
        {
          public_tweet_unviewable: {
            application: "apply",
            event_at: "2021-07-06T18:40:40.000Z",
            tweet: {
              author_id: "2244994945",
              id: "1346889436626259968",
            },
          },
        },
      ]),
    },
    {
      errors: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        detail: faker.lorem.slug(1),
        status: faker.number.int({ min: undefined, max: undefined }),
        title: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      })),
    },
  ]);
}

export function getGetTweetsLabelStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getSampleStream200Response() {
  return {
    data: {
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getSampleStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetTweetsSample10Stream200Response() {
  return {
    data: {
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getGetTweetsSample10StreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetsFullarchiveSearch200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetsFullarchiveSearchdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetsRecentSearch200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetsRecentSearchdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getSearchStream200Response() {
  return {
    data: {
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    matching_rules: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "120897978112909812",
      tag: "Non-retweeted coffee Tweets",
    })),
  };
}

export function getSearchStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetRules200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "120897978112909812",
      tag: "Non-retweeted coffee Tweets",
      value: "coffee -is:retweet",
    })),
    meta: {
      next_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
      sent: faker.lorem.slug(1),
      summary: faker.helpers.arrayElement([
        {
          created: 1,
          invalid: 1,
          not_created: 1,
          valid: 1,
        },
        {
          deleted: faker.number.int({ min: undefined, max: undefined }),
          not_deleted: faker.number.int({ min: undefined, max: undefined }),
        },
      ]),
    },
  };
}

export function getGetRulesdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getAddOrDeleteRules200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      id: "120897978112909812",
      tag: "Non-retweeted coffee Tweets",
      value: "coffee -is:retweet",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    meta: {
      next_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
      sent: faker.lorem.slug(1),
      summary: faker.helpers.arrayElement([
        {
          created: 1,
          invalid: 1,
          not_created: 1,
          valid: 1,
        },
        {
          deleted: faker.number.int({ min: undefined, max: undefined }),
          not_deleted: faker.number.int({ min: undefined, max: undefined }),
        },
      ]),
    },
  };
}

export function getAddOrDeleteRulesdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getDeleteTweetById200Response() {
  return {
    data: {
      deleted: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getDeleteTweetByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindTweetById200Response() {
  return {
    data: {
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindTweetByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetsIdLikingUsers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetsIdLikingUsersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindTweetsThatQuoteATweet200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getFindTweetsThatQuoteATweetdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getTweetsIdRetweetingUsers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getTweetsIdRetweetingUsersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getHideReplyById200Response() {
  return {
    data: {
      hidden: faker.datatype.boolean(),
    },
  };
}

export function getHideReplyByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindUsersById200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindUsersByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindUsersByUsername200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindUsersByUsernamedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindUserByUsername200Response() {
  return {
    data: {
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindUserByUsernamedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetUsersComplianceStream200Response() {
  return faker.helpers.arrayElement([
    {
      data: faker.helpers.arrayElement([
        {
          user_protect: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_unprotect: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_delete: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_undelete: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_suspend: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_unsuspend: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_withheld: {
            event_at: "2021-07-06T18:40:40.000Z",
            user: {
              id: "2244994945",
            },
            withheld_in_countries: [
              ...new Array(
                faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map((_) => "US"),
          },
        },
        {
          scrub_geo: {
            event_at: "2021-07-06T18:40:40.000Z",
            up_to_tweet_id: "1346889436626259968",
            user: {
              id: "2244994945",
            },
          },
        },
        {
          user_profile_modification: {
            event_at: "2021-07-06T18:40:40.000Z",
            new_value: faker.lorem.slug(1),
            profile_field: faker.lorem.slug(1),
            user: {
              id: "2244994945",
            },
          },
        },
      ]),
    },
    {
      errors: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        detail: faker.lorem.slug(1),
        status: faker.number.int({ min: undefined, max: undefined }),
        title: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
      })),
    },
  ]);
}

export function getGetUsersComplianceStreamdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindMyUser200Response() {
  return {
    data: {
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindMyUserdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getFindUserById200Response(id) {

  const firstName = faker.person.firstName()
  const lastName = faker.person.lastName()
  return {
    data: {
      created_at: faker.date.past({ years: 2 }),
      id: id,
      name: `${firstName} ${lastName}`,
      protected: false,
      username: faker.internet.userName({firstName, lastName}),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
  };
}

export function getFindUserByIddefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdBlocking200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdBlockingdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdBlock200Response() {
  return {
    data: {
      blocking: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdBlockdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetUsersIdBookmarks200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetUsersIdBookmarksdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getPostUsersIdBookmarks200Response() {
  return {
    data: {
      bookmarked: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getPostUsersIdBookmarksdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdBookmarksDelete200Response() {
  return {
    data: {
      bookmarked: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdBookmarksDeletedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUserFollowedLists200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: faker.date.past(),
      description: faker.lorem.slug(1),
      follower_count: faker.number.int({ min: undefined, max: undefined }),
      id: "1146654567674912769",
      member_count: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      owner_id: "2244994945",
      private: faker.datatype.boolean(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUserFollowedListsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserFollow200Response() {
  return {
    data: {
      following: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListUserFollowdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserUnfollow200Response() {
  return {
    data: {
      following: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListUserUnfollowdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdFollowers200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdFollowersdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdFollowing200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdFollowingdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdFollow200Response() {
  return {
    data: {
      following: faker.datatype.boolean(),
      pending_follow: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdFollowdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdLikedTweets200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdLikedTweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdLike200Response() {
  return {
    data: {
      liked: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdLikedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdUnlike200Response() {
  return {
    data: {
      liked: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdUnlikedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getGetUserListMemberships200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: faker.date.past(),
      description: faker.lorem.slug(1),
      follower_count: faker.number.int({ min: undefined, max: undefined }),
      id: "1146654567674912769",
      member_count: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      owner_id: "2244994945",
      private: faker.datatype.boolean(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getGetUserListMembershipsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdMentions200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdMentionsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdMuting200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: "2013-12-14T04:35:55Z",
      id: "2244994945",
      name: "Twitter Dev",
      protected: false,
      username: "TwitterDev",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdMutingdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdMute200Response() {
  return {
    data: {
      muting: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdMutedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserOwnedLists200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: faker.date.past(),
      description: faker.lorem.slug(1),
      follower_count: faker.number.int({ min: undefined, max: undefined }),
      id: "1146654567674912769",
      member_count: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      owner_id: "2244994945",
      private: faker.datatype.boolean(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      next_token: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListUserOwnedListsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserPinnedLists200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      created_at: faker.date.past(),
      description: faker.lorem.slug(1),
      follower_count: faker.number.int({ min: undefined, max: undefined }),
      id: "1146654567674912769",
      member_count: faker.number.int({ min: undefined, max: undefined }),
      name: faker.person.fullName(),
      owner_id: "2244994945",
      private: faker.datatype.boolean(),
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getListUserPinnedListsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserPin200Response() {
  return {
    data: {
      pinned: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListUserPindefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getListUserUnpin200Response() {
  return {
    data: {
      pinned: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getListUserUnpindefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdRetweets200Response() {
  return {
    data: {
      retweeted: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdRetweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdUnretweets200Response() {
  return {
    data: {
      retweeted: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdUnretweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdTimeline200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdTimelinedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdTweets200Response() {
  return {
    data: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      author_id: "2244994945",
      created_at: "Wed Jan 06 18:40:40 +0000 2021",
      id: "1346889436626259968",
      text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
    })),
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
    includes: {
      media: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        height: faker.number.int({ min: 0, max: undefined }),
        media_key: faker.lorem.slug(1),
        type: faker.lorem.slug(1),
        width: faker.number.int({ min: 0, max: undefined }),
      })),
      places: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        contained_within: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => "f7eb2fa2fea288b1"),
        country: "United States",
        country_code: "US",
        full_name: "Lakewood, CO",
        geo: {
          bbox: [-105.193475, 39.60973, -105.053164, 39.761974],
          geometry: {
            coordinates: [-105.18816086351444, 40.247749999999996],
            type: "Point",
          },
          properties: {},
          type: faker.helpers.arrayElement(["Feature"]),
        },
        id: "f7eb2fa2fea288b1",
        name: "Lakewood",
        place_type: "city",
      })),
      polls: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        duration_minutes: faker.number.int({ min: 5, max: 10080 }),
        end_datetime: faker.date.past(),
        id: "1365059861688410112",
        options: [
          ...new Array(
            faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
          ).keys(),
        ].map((_) => ({
          label: faker.lorem.slug(1),
          position: faker.number.int({ min: undefined, max: undefined }),
          votes: faker.number.int({ min: undefined, max: undefined }),
        })),
        voting_status: faker.helpers.arrayElement(["open", "closed"]),
      })),
      topics: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        description: "All about technology",
        id: faker.lorem.slug(1),
        name: "Technology",
      })),
      tweets: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        author_id: "2244994945",
        created_at: "Wed Jan 06 18:40:40 +0000 2021",
        id: "1346889436626259968",
        text: "Learn how to use the user Tweet timeline and user mention timeline endpoints in the Twitter API v2 to explore Tweet\\u2026 https:\\/\\/t.co\\/56a0vZUx7i",
      })),
      users: [
        ...new Array(
          faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })
        ).keys(),
      ].map((_) => ({
        created_at: "2013-12-14T04:35:55Z",
        id: "2244994945",
        name: "Twitter Dev",
        protected: false,
        username: "TwitterDev",
      })),
    },
    meta: {
      newest_id: faker.lorem.slug(1),
      next_token: faker.lorem.slug(1),
      oldest_id: faker.lorem.slug(1),
      previous_token: faker.lorem.slug(1),
      result_count: faker.number.int({ min: undefined, max: undefined }),
    },
  };
}

export function getUsersIdTweetsdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdUnblock200Response() {
  return {
    data: {
      blocking: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdUnblockdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdUnfollow200Response() {
  return {
    data: {
      following: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdUnfollowdefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}

export function getUsersIdUnmute200Response() {
  return {
    data: {
      muting: faker.datatype.boolean(),
    },
    errors: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      detail: faker.lorem.slug(1),
      status: faker.number.int({ min: undefined, max: undefined }),
      title: faker.lorem.slug(1),
      type: faker.lorem.slug(1),
    })),
  };
}

export function getUsersIdUnmutedefaultResponse() {
  return {
    code: faker.number.int({ min: undefined, max: undefined }),
    message: faker.lorem.slug(1),
  };
}